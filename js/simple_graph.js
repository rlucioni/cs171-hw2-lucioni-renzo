// Generated by CoffeeScript 1.7.1
var canvasHeight, canvasWidth, categoryColor, categorySize, fill, force, forceLayout, graph, graphUpdate, lineCatLayout, lineLayout, link, nb_cat, nb_nodes, node, radialLayout, randomLayout, svg, tick;

tick = function(d) {
  return graphUpdate(0);
};

randomLayout = function() {
  force.stop();
  graph.nodes.forEach(function(d, i) {
    d.x = canvasWidth / 4 + 2 * canvasWidth * Math.random() / 4;
    return d.y = canvasHeight / 4 + 2 * canvasHeight * Math.random() / 4;
  });
  return graphUpdate(500);
};

forceLayout = function() {
  return force.nodes(graph.nodes).links(graph.links).start();
};

lineLayout = function() {
  force.stop();
  graph.nodes.forEach(function(d, i) {
    return d.y = canvasHeight / 2;
  });
  return graphUpdate(500);
};

lineCatLayout = function() {
  force.stop();
  graph.nodes.forEach(function(d, i) {
    return d.y = canvasHeight / 2 + d.cat * 20;
  });
  return graphUpdate(500);
};

radialLayout = function() {
  var arc, pie, r;
  force.stop();
  r = canvasHeight / 2;
  arc = d3.svg.arc().outerRadius(r);
  pie = d3.layout.pie().sort(function(a, b) {
    return a.cat - b.cat;
  }).value(function(d, i) {
    return 1;
  });
  graph.nodes = pie(graph.nodes).map(function(d, i) {
    d.innerRadius = 0;
    d.outerRadius = r;
    d.data.x = arc.centroid(d)[0] + canvasHeight / 2;
    d.data.y = arc.centroid(d)[1] + canvasWidth / 2;
    d.data.endAngle = d.endAngle;
    d.data.startAngle = d.startAngle;
    return d.data;
  });
  return graphUpdate(500);
};

categoryColor = function() {
  return d3.selectAll("circle").transition().duration(500).style("fill", function(d) {
    return fill(d.cat);
  });
};

categorySize = function() {
  return d3.selectAll("circle").transition().duration(500).attr("r", function(d) {
    return Math.sqrt((d.cat + 1) * 10);
  });
};

graphUpdate = function(delay) {
  link.transition().duration(delay).attr("x1", function(d) {
    return d.target.x;
  }).attr("y1", function(d) {
    return d.target.y;
  }).attr("x2", function(d) {
    return d.source.x;
  }).attr("y2", function(d) {
    return d.source.y;
  });
  return node.transition().duration(delay).attr("transform", function(d) {
    return "translate(" + d.x + ", " + d.y + ")";
  });
};

canvasWidth = 900;

canvasHeight = 700;

svg = d3.select("body").append("svg").attr("width", canvasWidth).attr("height", canvasHeight);

fill = d3.scale.ordinal().domain(d3.range(10)).range(colorbrewer.Set3[10]);

graph = {
  nodes: [],
  links: []
};

nb_nodes = 100;

nb_cat = 10;

graph.nodes = d3.range(nb_nodes).map(function() {
  return {
    cat: Math.floor(nb_cat * Math.random())
  };
});

graph.nodes.map(function(d, i) {
  return graph.nodes.map(function(e, j) {
    if (Math.random() > 0.99 && i !== j) {
      return graph.links.push({
        source: i,
        target: j
      });
    }
  });
});

force = d3.layout.force().size([canvasWidth, canvasHeight]).charge(-50).linkDistance(10).on("tick", tick).on("start", function(d) {}).on("end", function(d) {});

d3.select("input[value='force']").on("click", forceLayout);

d3.select("input[value='random']").on("click", randomLayout);

d3.select("input[value='line']").on("click", lineLayout);

d3.select("input[value='line_cat']").on("click", lineCatLayout);

d3.select("input[value='radial']").on("click", radialLayout);

d3.select("input[value='nocolor']").on("click", function() {
  return d3.selectAll("circle").transition().duration(500).style("fill", "#66CC66");
});

d3.select("input[value='color_cat']").on("click", categoryColor);

d3.select("input[value='nosize']").on("click", function() {
  return d3.selectAll("circle").transition().duration(500).attr("r", 5);
});

d3.select("input[value='size_cat']").on("click", categorySize);

link = svg.selectAll(".link").data(graph.links).enter().append("line").attr("class", "link");

node = svg.selectAll(".node").data(graph.nodes).enter().append("g").attr("class", "node");

node.append("circle").attr("r", 5);

forceLayout();
